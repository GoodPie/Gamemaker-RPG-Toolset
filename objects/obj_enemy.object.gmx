<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_enemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Define enemy movement and state variables

// Define basic states for the enemy
enum states {
     IDLE,
     WANDERING,
     CHASING,
     ATTACKING,
     ATTACK_COOLDOWN
}

// Default state
current_state = states.IDLE;

// How fast the enemy can move
move_speed = 10;

// How long to wait between attacks
cool_down = 20;

// Radius to detect player
detect_radius = 128;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset state to chasing
current_state = states.CHASING;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Transition between states

// First check if the player is within range
if (distance_to_object(obj_player) &lt; detect_radius) {
   // Only move if not on cooldown
   if (current_state != states.ATTACK_COOLDOWN) {
      // Chase the player
      current_state = states.CHASING;
   }
} else {
    // Return to idle state when player no longer in range
    if (current_state == states.CHASING or current_state = states.ATTACK_COOLDOWN) {
        current_state = states.IDLE;
    }
    
   // Transition between idle and wandering
   var transition_chance = random_range(0, 10);
   
   // Transition between wandering and idle
   if (transition_chance &gt; 9.0) {
      if (current_state == states.WANDERING) {
          current_state = states.IDLE;
      } else if (current_state == states.IDLE) {
          current_state = states.WANDERING;
      } 
   }
   
   
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Perform action based on the current state

if (current_state == states.WANDERING) {
    var x_dir = irandom_range(-1, 1);
    var y_dir = irandom_range(-1, 1);
    
    var new_x = x + (move_speed * x_dir);
    var new_y = y + (move_speed * y_dir);
   
    in_bounds_y = (y + new_y &gt; 0) and (y + new_y &lt; room_height - 32);
    in_bounds_x = (x + new_x &gt; 0) and (x + new_x &lt; room_width - 32);
    
    // Only allow the player to move if no busy conditions
    if (obj_controller.is_busy == false)
    {
        if (!place_meeting(x + new_x, y, obj_solid) and in_bounds_x) {
           x += (x_dir * move_speed);
        }
        
        if (!place_meeting(x, y + new_y, obj_solid) and in_bounds_y) {
           y += (y_dir * move_speed);
        }
    }
} else if (current_state == states.CHASING) {

    // Determine distance to player
    var dist_x = obj_player.x - x;
    var dist_y = obj_player.y - y;
    
    // Get unit vector
    var uv_x = dist_x / (sqr(dist_y) + sqr(dist_x));
    var uv_y = dist_y / (sqr(dist_y) + sqr(dist_x));
    
    // Check for collisions
    var new_x = x + (move_speed * uv_x);
    var new_y = y + (move_speed * uv_y);
    
    in_bounds_y = (y + new_y &gt; 0) and (y + new_y &lt; room_height - 32);
    in_bounds_x = (x + new_x &gt; 0) and (x + new_x &lt; room_width - 32);
    
    // Only allow the player to move if no busy conditions
    if (obj_controller.is_busy == false)
    {
        if (!place_meeting(x + new_x, y, obj_solid) and in_bounds_x) {
           x += ((move_speed * 2) * uv_x);
        }
        
        if (!place_meeting(x, y + new_y, obj_solid) and in_bounds_y) {
           y += ((move_speed * 2) * uv_y);
        }
    }
} else if (current_state = states.ATTACK_COOLDOWN) {
    if (!alarm[0]) {
        alarm[0] = cool_down;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
