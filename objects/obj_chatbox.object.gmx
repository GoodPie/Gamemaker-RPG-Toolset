<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize chatbox variables

// Initialize text array to hold all the speech 
// A data structure should be created for more advanced dialog rather than a simple string
text[0] = "Hello, World!";
text[1] = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis ac urna pellentesque, suscipit lorem vitae, vulputate augue. Cras mattis vestibulum."

// Current index of chat
chat_index = 0;

// Keep track of letter index for typing effect
char_index = 0;

// If the user wants to speed it up, show text instantly using this flag
chat_next = false;

// Flag for typing out text
is_typing = true;
alarm_in_progress = false;

// If using data structure in array, keep flag so we can delete it on end
using_ds = false;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Control visuals of chatbox

// How fast the text (each character is drawn to the screen)
type_speed = 2;

// How wide the textbox is relative to the window
var perc_width = 0.7;
var perc_height = 0.25;

// Padding inside the box
padding = 5;

// Textbox color
box_color = c_black;
border_color = c_gray;

// Calculate the width of the box
box_width = perc_width * window_get_width();
box_height = perc_height * window_get_height();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Increment the character to look like it's typing

char_index += 1;
alarm_in_progress = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for keyboard presses and handle events

var can_close = false;
var next_page = false;

// Check if the character exceeds the length of the string
if (char_index &gt;= string_length(text[chat_index])) {
    
    // Ensure the we aren't going out of array bounds
    if (chat_index &gt;= array_length_1d(text) - 1) {
       // User now free to close chat
       can_close = true;       
    } else {
       // User can go to next text
       next_page = true;
    }

}

// Handle next action
if (keyboard_check_pressed(ord("E"))) {

    // Show the full text if not at the end
    char_index = string_length(text[chat_index]);
    
    // Close the chat box if at the end
    if (can_close) {
       instance_destroy();
    } else if (next_page) {
        chat_index += 1;
        char_index = 0;
    }
}

// Alarm to go to next character to make it look like it's tpying
if (!alarm_in_progress) {
   alarm[0] = type_speed;
   alarm_in_progress = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the chatbox


// Determine the cooardinates for the chatbox border
var top_left_x = (window_get_width() / 2) - (box_width / 2);
var top_left_y = window_get_height() - box_height;
var bottom_right_x = (window_get_width() / 2) + (box_width / 2);
var bottom_right_y = window_get_height();

// Draw the chat box border
draw_set_colour(border_color);
draw_rectangle(top_left_x, top_left_y, bottom_right_x, bottom_right_y, false);

// Determine the coordinates for the actual chat box
top_left_x += padding;
top_left_y += padding;
bottom_right_x -= padding;
bottom_right_y -= padding;

// Draw the chat box
draw_set_colour(box_color);
draw_rectangle(top_left_x, top_left_y, bottom_right_x, bottom_right_y, false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw the text to the chatbox

// Determine the boundaries of the text
var top_left_x = (window_get_width() / 2) - (box_width / 2) + (padding * 2);
var top_left_y = window_get_height() - box_height  + (padding * 2);
var max_width = box_width - (2 * padding);

// Get the current string
var current_text = "";
for (var i = 1; i &lt;= char_index; i++) {
    current_text += string_char_at(text[chat_index], i);
}

// Draw the text to the screen
draw_set_color(c_white);
draw_text_ext(top_left_x, top_left_y, current_text, 14, max_width);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
